# Cursor Repo Rules for TrainU

## Project Context
- This is the **interim TrainU app**: authenticated dashboards + public trainer directory.
- **Go High Level (GHL)** is the operational source of truth (leads, calendars, messages, offers/payments).
- **Supabase** is product data (profiles, programs, sessions, goals, files) and agent telemetry.
- Do not add end-user AI features yet; AI is for **PocketFlow ticket automation** only.

## Always Load This Context
Before answering or editing code, read these files (summaries allowed):
- `README.md`, `ARCHITECTURE.md`, `API_CONTRACTS.md`, `CONFIG.md`, `docs/Observability.md`, `ERRORS.md`, `docs/ROADMAP.md`
- `docs/Context/RUNBOOKS/trainer_onboarding.md`, `docs/Context/RUNBOOKS/client_onboarding.md`, `docs/Context/RUNBOOKS/incident_triage.md`
- `docs/Context/AGENTS/trainer_agent_prompt.md`, `docs/Context/AGENTS/client_agent_prompt.md`, `docs/Context/AGENTS/ai_inbox_specs.md`
- `infra/supabase/schema.sql`
- `apps/web/lib/ghl.ts`, `apps/web/app/api/webhooks/ghl/route.ts`
- `apps/web/lib/goals.ts`, `apps/web/lib/auth.ts`
- `apps/agent/src/flows/ticket_flow.ts`, `apps/agent/src/logger.ts`

## Change Policy
- **Never** hardcode secrets; use envs and update `.env.example` if a new var is required (with a one-line comment).
- Keep all **GHL** calls inside `apps/web/lib/ghl.ts`. If a new endpoint is needed, add a typed helper there.
- Webhook handlers must be **idempotent** and write to `webhook_events` first; then fan-out to tables.
- If you change an API shape or route: update `API_CONTRACTS.md` in the same PR.

## PocketFlow / Agent Workflow
For any non-trivial change, follow this shape in PR description and comments:
1) **PLAN** – bullet steps, files to touch, acceptance checks.
2) **DIFF** – concise unified patch; explain risky sections.
3) **TEST** – commands to run (typecheck/lint/dev) and expected outcomes.
4) **RISKS** – likely failures + rollbacks.
- Branch names: `pf/<ticketId>-<slug>`. Commits must include `[PF:<ticketId>]`.
- Emit structured logs via `agent_events` (no PII; redact phone/email/tokens).

## Frontend Rules
- Next.js App Router with RSC; prefer **server actions** for DB/write ops.
- Keep UI **spacious** (cards, breathing room). Tailwind; avoid inline styles.
- Capture key events with PostHog: auth, directory search, profile view, book CTA, upload, template-apply.

## Backend Rules
- Supabase: aim for simple SQL and views (`v_goal_progress`) for computed data.
- Add RLS policies when exposing new tables to the client.
- All external fetches must check `res.ok` and throw with a **brief** error.

## Goals & Progress
- Use `goals` + `goal_entries` and `v_goal_progress`. If adding a new metric, keep unit + baseline semantics consistent.

## Error & Observability
- Use Sentry in FE/BE; include a stable fingerprint for recurring issues.
- If you add a retry/backoff, document it in `OBSERVABILITY.md`.

## Guardrails / Anti-patterns
- No dual booking sources in v0 (exclude Calendly).
- Don't leak PII in logs or analytics.
- Don't couple UI directly to GHL responses—go through `ghl.ts`.

## When in Doubt
- Prefer opening a **PocketFlow ticket** with PLAN over ad-hoc large edits.

## Documentation Standards

### Context Documents
- Treat files in `docs/Context/` as the single source of truth for scope, PRD, data model, integrations, agents, runbooks, OKRs, and security.
- When creating or updating docs, update links to point into `docs/Context/`.
- If a new doc substantially overlaps an existing one, archive the older one to `docs/_archive/` with a DEPRECATED banner.
- `README.md` must always include: project summary, quickstart, links to `docs/Context/`, NOT-IN-V1 section, and links to `ROADMAP.md` and `SECURITY_PRIVACY.md`.

### File Organization
- Keep all canonical documentation in `docs/Context/` with proper subfolder organization
- Archive deprecated docs to `docs/_archive/` with deprecation banners
- Ensure cross-references use correct relative paths
- Maintain consistency in document structure and formatting

### Link Hygiene
- All internal links should use relative paths to `docs/Context/` files
- Update links when moving or renaming files
- Test that all links resolve correctly
- Use descriptive link text, not just "here" or "this"

## Code Quality
- Prefer incremental changes with unified diff previews
- Avoid introducing duplicate files or alternative spellings of the same document
- Run typecheck and lint before committing
- Follow the established patterns in the codebase

## AI Agent Guidelines
- All AI agent interactions must go through human-in-the-loop approval
- Use structured prompts with safety constraints
- Implement rate limiting and quiet hours
- Log all agent operations for audit trails
- Never auto-send messages without trainer approval

## Integration Patterns
- Webhook handlers must be idempotent
- Use exponential backoff for retries
- Implement dead letter queues for failed operations
- Verify webhook signatures and use IP allowlists where possible
- Store minimal necessary PII and encrypt at rest